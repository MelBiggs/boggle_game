{"filter":false,"title":"boggle.py","tooltip":"/boggle.py","undoManager":{"mark":76,"position":76,"stack":[[{"start":{"row":0,"column":0},"end":{"row":6,"column":32},"action":"insert","lines":["def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): ' ' for row in range(height)","        for col in range(width)}"],"id":1}],[{"start":{"row":5,"column":26},"end":{"row":5,"column":27},"action":"remove","lines":["'"],"id":2},{"start":{"row":5,"column":25},"end":{"row":5,"column":26},"action":"remove","lines":[" "]},{"start":{"row":5,"column":24},"end":{"row":5,"column":25},"action":"remove","lines":["'"]}],[{"start":{"row":5,"column":24},"end":{"row":5,"column":25},"action":"insert","lines":["c"],"id":3},{"start":{"row":5,"column":25},"end":{"row":5,"column":26},"action":"insert","lines":["h"]},{"start":{"row":5,"column":26},"end":{"row":5,"column":27},"action":"insert","lines":["o"]},{"start":{"row":5,"column":27},"end":{"row":5,"column":28},"action":"insert","lines":["i"]},{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"insert","lines":["x"]},{"start":{"row":5,"column":29},"end":{"row":5,"column":30},"action":"insert","lines":["w"]}],[{"start":{"row":5,"column":29},"end":{"row":5,"column":30},"action":"remove","lines":["w"],"id":4},{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"remove","lines":["x"]}],[{"start":{"row":5,"column":28},"end":{"row":5,"column":29},"action":"insert","lines":["c"],"id":5},{"start":{"row":5,"column":29},"end":{"row":5,"column":30},"action":"insert","lines":["e"]}],[{"start":{"row":5,"column":30},"end":{"row":5,"column":32},"action":"insert","lines":["()"],"id":6}],[{"start":{"row":5,"column":31},"end":{"row":5,"column":32},"action":"insert","lines":["a"],"id":7},{"start":{"row":5,"column":32},"end":{"row":5,"column":33},"action":"insert","lines":["s"]}],[{"start":{"row":5,"column":31},"end":{"row":5,"column":33},"action":"remove","lines":["as"],"id":8},{"start":{"row":5,"column":31},"end":{"row":5,"column":38},"action":"insert","lines":["ascii()"]}],[{"start":{"row":5,"column":36},"end":{"row":5,"column":38},"action":"remove","lines":["()"],"id":9}],[{"start":{"row":5,"column":36},"end":{"row":5,"column":37},"action":"insert","lines":["_"],"id":10}],[{"start":{"row":5,"column":31},"end":{"row":5,"column":37},"action":"remove","lines":["ascii_"],"id":11},{"start":{"row":5,"column":31},"end":{"row":5,"column":46},"action":"insert","lines":["ascii_uppercase"]}],[{"start":{"row":5,"column":48},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":12},{"start":{"row":6,"column":0},"end":{"row":6,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":6,"column":4},"end":{"row":6,"column":8},"action":"insert","lines":["    "],"id":13}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":14},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["f"],"id":15},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["r"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["o"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":[" "],"id":16},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["s"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":["t"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["r"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["o"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["n"],"id":17},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["o"]}],[{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["i"],"id":18},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["n"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["g"]}],[{"start":{"row":0,"column":11},"end":{"row":0,"column":12},"action":"insert","lines":[" "],"id":19},{"start":{"row":0,"column":12},"end":{"row":0,"column":13},"action":"insert","lines":["i"]},{"start":{"row":0,"column":13},"end":{"row":0,"column":14},"action":"insert","lines":["m"]},{"start":{"row":0,"column":14},"end":{"row":0,"column":15},"action":"insert","lines":["p"]},{"start":{"row":0,"column":15},"end":{"row":0,"column":16},"action":"insert","lines":["o"]},{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["r"]},{"start":{"row":0,"column":17},"end":{"row":0,"column":18},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":[" "],"id":20}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["a"],"id":21},{"start":{"row":0,"column":20},"end":{"row":0,"column":21},"action":"insert","lines":["s"]},{"start":{"row":0,"column":21},"end":{"row":0,"column":22},"action":"insert","lines":["c"]}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":22},"action":"remove","lines":["asc"],"id":22},{"start":{"row":0,"column":19},"end":{"row":0,"column":32},"action":"insert","lines":["ascii_letters"]}],[{"start":{"row":0,"column":32},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":23}],[{"start":{"row":0,"column":32},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":24},{"start":{"row":0,"column":31},"end":{"row":0,"column":32},"action":"remove","lines":["s"]},{"start":{"row":0,"column":30},"end":{"row":0,"column":31},"action":"remove","lines":["r"]},{"start":{"row":0,"column":29},"end":{"row":0,"column":30},"action":"remove","lines":["e"]},{"start":{"row":0,"column":28},"end":{"row":0,"column":29},"action":"remove","lines":["t"]},{"start":{"row":0,"column":27},"end":{"row":0,"column":28},"action":"remove","lines":["t"]},{"start":{"row":0,"column":26},"end":{"row":0,"column":27},"action":"remove","lines":["e"]},{"start":{"row":0,"column":25},"end":{"row":0,"column":26},"action":"remove","lines":["l"]}],[{"start":{"row":0,"column":25},"end":{"row":0,"column":26},"action":"insert","lines":["u"],"id":25}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":26},"action":"remove","lines":["ascii_u"],"id":26},{"start":{"row":0,"column":19},"end":{"row":0,"column":34},"action":"insert","lines":["ascii_uppercase"]}],[{"start":{"row":0,"column":34},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":27},{"start":{"row":1,"column":0},"end":{"row":1,"column":1},"action":"insert","lines":["f"]},{"start":{"row":1,"column":1},"end":{"row":1,"column":2},"action":"insert","lines":["r"]},{"start":{"row":1,"column":2},"end":{"row":1,"column":3},"action":"insert","lines":["o"]},{"start":{"row":1,"column":3},"end":{"row":1,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":1,"column":4},"end":{"row":1,"column":5},"action":"insert","lines":[" "],"id":28},{"start":{"row":1,"column":5},"end":{"row":1,"column":6},"action":"insert","lines":["r"]},{"start":{"row":1,"column":6},"end":{"row":1,"column":7},"action":"insert","lines":["a"]},{"start":{"row":1,"column":7},"end":{"row":1,"column":8},"action":"insert","lines":["n"]},{"start":{"row":1,"column":8},"end":{"row":1,"column":9},"action":"insert","lines":["d"]},{"start":{"row":1,"column":9},"end":{"row":1,"column":10},"action":"insert","lines":["o"]},{"start":{"row":1,"column":10},"end":{"row":1,"column":11},"action":"insert","lines":["m"]}],[{"start":{"row":1,"column":11},"end":{"row":1,"column":12},"action":"insert","lines":[" "],"id":29},{"start":{"row":1,"column":12},"end":{"row":1,"column":13},"action":"insert","lines":["i"]},{"start":{"row":1,"column":13},"end":{"row":1,"column":14},"action":"insert","lines":["m"]},{"start":{"row":1,"column":14},"end":{"row":1,"column":15},"action":"insert","lines":["p"]},{"start":{"row":1,"column":15},"end":{"row":1,"column":16},"action":"insert","lines":["o"]},{"start":{"row":1,"column":16},"end":{"row":1,"column":17},"action":"insert","lines":["r"]},{"start":{"row":1,"column":17},"end":{"row":1,"column":18},"action":"insert","lines":["t"]}],[{"start":{"row":1,"column":18},"end":{"row":1,"column":19},"action":"insert","lines":[" "],"id":30},{"start":{"row":1,"column":19},"end":{"row":1,"column":20},"action":"insert","lines":["c"]},{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"insert","lines":["o"]}],[{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"remove","lines":["o"],"id":31}],[{"start":{"row":1,"column":20},"end":{"row":1,"column":21},"action":"insert","lines":["h"],"id":32},{"start":{"row":1,"column":21},"end":{"row":1,"column":22},"action":"insert","lines":["o"]},{"start":{"row":1,"column":22},"end":{"row":1,"column":23},"action":"insert","lines":["i"]},{"start":{"row":1,"column":23},"end":{"row":1,"column":24},"action":"insert","lines":["c"]},{"start":{"row":1,"column":24},"end":{"row":1,"column":25},"action":"insert","lines":["e"]}],[{"start":{"row":10,"column":32},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":33},{"start":{"row":11,"column":0},"end":{"row":11,"column":8},"action":"insert","lines":["        "]},{"start":{"row":11,"column":8},"end":{"row":12,"column":0},"action":"insert","lines":["",""]},{"start":{"row":12,"column":0},"end":{"row":12,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":8},"action":"remove","lines":["    "],"id":34},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":12,"column":0},"end":{"row":38,"column":53},"action":"insert","lines":["def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]"],"id":35}],[{"start":{"row":50,"column":21},"end":{"row":51,"column":0},"action":"insert","lines":["",""],"id":36},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"remove","lines":["    "],"id":37}],[{"start":{"row":51,"column":0},"end":{"row":52,"column":0},"action":"insert","lines":["",""],"id":38}],[{"start":{"row":52,"column":0},"end":{"row":56,"column":43},"action":"insert","lines":["def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])"],"id":39}],[{"start":{"row":56,"column":43},"end":{"row":57,"column":0},"action":"insert","lines":["",""],"id":40},{"start":{"row":57,"column":0},"end":{"row":57,"column":4},"action":"insert","lines":["    "]},{"start":{"row":57,"column":4},"end":{"row":58,"column":0},"action":"insert","lines":["",""]},{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"remove","lines":["    "],"id":41}],[{"start":{"row":58,"column":0},"end":{"row":81,"column":21},"action":"insert","lines":["","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)"],"id":42}],[{"start":{"row":61,"column":14},"end":{"row":61,"column":15},"action":"insert","lines":["o"],"id":43}],[{"start":{"row":81,"column":21},"end":{"row":82,"column":0},"action":"insert","lines":["",""],"id":44},{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"insert","lines":["    "]},{"start":{"row":82,"column":4},"end":{"row":83,"column":0},"action":"insert","lines":["",""]},{"start":{"row":83,"column":0},"end":{"row":83,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":83,"column":0},"end":{"row":83,"column":4},"action":"remove","lines":["    "],"id":45}],[{"start":{"row":83,"column":0},"end":{"row":88,"column":45},"action":"insert","lines":["def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]"],"id":46}],[{"start":{"row":88,"column":45},"end":{"row":89,"column":0},"action":"insert","lines":["",""],"id":47},{"start":{"row":89,"column":0},"end":{"row":89,"column":8},"action":"insert","lines":["        "]},{"start":{"row":89,"column":8},"end":{"row":90,"column":0},"action":"insert","lines":["",""]},{"start":{"row":90,"column":0},"end":{"row":90,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":90,"column":4},"end":{"row":90,"column":8},"action":"remove","lines":["    "],"id":48},{"start":{"row":90,"column":0},"end":{"row":90,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":90,"column":0},"end":{"row":103,"column":10},"action":"insert","lines":["def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":49}],[{"start":{"row":94,"column":21},"end":{"row":94,"column":22},"action":"remove","lines":["3"],"id":50}],[{"start":{"row":94,"column":21},"end":{"row":94,"column":22},"action":"insert","lines":["2"],"id":51}],[{"start":{"row":94,"column":24},"end":{"row":94,"column":25},"action":"remove","lines":["3"],"id":52}],[{"start":{"row":94,"column":24},"end":{"row":94,"column":25},"action":"insert","lines":["2"],"id":53}],[{"start":{"row":94,"column":21},"end":{"row":94,"column":22},"action":"remove","lines":["2"],"id":54}],[{"start":{"row":94,"column":21},"end":{"row":94,"column":22},"action":"insert","lines":["3"],"id":55}],[{"start":{"row":94,"column":24},"end":{"row":94,"column":25},"action":"remove","lines":["2"],"id":56}],[{"start":{"row":94,"column":24},"end":{"row":94,"column":25},"action":"insert","lines":["3"],"id":57}],[{"start":{"row":94,"column":25},"end":{"row":95,"column":0},"action":"insert","lines":["",""],"id":58},{"start":{"row":95,"column":0},"end":{"row":95,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":95,"column":0},"end":{"row":95,"column":4},"action":"remove","lines":["    "],"id":59},{"start":{"row":94,"column":25},"end":{"row":95,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":90,"column":0},"end":{"row":103,"column":10},"action":"remove","lines":["def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"],"id":60},{"start":{"row":90,"column":0},"end":{"row":110,"column":10},"action":"insert","lines":["def display_words(words):","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","    ","        ","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(2, 2)","    \"\"\"","    Here you can change your grid from a 3x3 to a 2x2 to test run times","    \"\"\"","    dictionary = get_dictionary(\"words.txt\")","    words = search(grid, dictionary)","    display_words(words)","","if __name__ == \"__main__\":","    # Code in here will only execution when the file is run directly    ","    main()"]}],[{"start":{"row":100,"column":21},"end":{"row":100,"column":22},"action":"remove","lines":["2"],"id":61}],[{"start":{"row":100,"column":21},"end":{"row":100,"column":22},"action":"insert","lines":["2"],"id":62}],[{"start":{"row":100,"column":24},"end":{"row":100,"column":25},"action":"remove","lines":["2"],"id":63}],[{"start":{"row":100,"column":24},"end":{"row":100,"column":25},"action":"insert","lines":["3"],"id":64}],[{"start":{"row":100,"column":21},"end":{"row":100,"column":22},"action":"remove","lines":["2"],"id":65}],[{"start":{"row":100,"column":21},"end":{"row":100,"column":22},"action":"insert","lines":["3"],"id":66}],[{"start":{"row":50,"column":21},"end":{"row":110,"column":10},"action":"insert","lines":["","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","    ","","def search(grid, dictionary):","    \"\"\"","    Search through the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","    ","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return [w.strip().upper() for w in f]","        ","def display_words(words):","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","    ","        ","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    \"\"\"","    Here you can change your grid from a 3x3 to a 2x2 to test run times","    \"\"\"","    dictionary = get_dictionary(\"words.txt\")","    words = search(grid, dictionary)","    display_words(words)","","if __name__ == \"__main__\":","    # Code in here will only execution when the file is run directly    ","    main()"],"id":67}],[{"start":{"row":57,"column":4},"end":{"row":58,"column":0},"action":"insert","lines":["",""],"id":68},{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":58,"column":0},"end":{"row":59,"column":23},"action":"insert","lines":["def word_in_dictionary(word, dict):","    return word in dict"],"id":69}],[{"start":{"row":59,"column":23},"end":{"row":59,"column":27},"action":"remove","lines":["    "],"id":70},{"start":{"row":59,"column":23},"end":{"row":60,"column":0},"action":"insert","lines":["",""]},{"start":{"row":60,"column":0},"end":{"row":60,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":57,"column":4},"end":{"row":58,"column":0},"action":"insert","lines":["",""],"id":71},{"start":{"row":58,"column":0},"end":{"row":58,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":71,"column":0},"end":{"row":85,"column":21},"action":"remove","lines":["    def do_search(path):","        word = path_to_word(grid, path)","        if word in dictionary:","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)"],"id":72},{"start":{"row":71,"column":0},"end":{"row":85,"column":21},"action":"insert","lines":["    def do_search(path):","        word = path_to_word(grid, path)","        if word_in_dictionary(word, dictionary):","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)"]}],[{"start":{"row":92,"column":15},"end":{"row":92,"column":16},"action":"remove","lines":["["],"id":73}],[{"start":{"row":92,"column":15},"end":{"row":92,"column":16},"action":"insert","lines":["{"],"id":74}],[{"start":{"row":92,"column":44},"end":{"row":92,"column":45},"action":"remove","lines":["]"],"id":75}],[{"start":{"row":92,"column":44},"end":{"row":92,"column":45},"action":"insert","lines":["}"],"id":76}],[{"start":{"row":0,"column":0},"end":{"row":114,"column":10},"action":"remove","lines":["from string import ascii_uppercase","from random import choice","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase) ","        for row in range(height)","        for col in range(width)}","        ","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","            ","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","    ","    ","def word_in_dictionary(word, dict):","    return word in dict","    ","","def search(grid, dictionary):","    \"\"\"","    Search through the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","","    def do_search(path):","        word = path_to_word(grid, path)","        if word_in_dictionary(word, dictionary):","            paths.append(path)","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","    ","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    with open(dictionary_file) as f:","        return {w.strip().upper() for w in f}","        ","def display_words(words):","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","    ","        ","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(3, 3)","    \"\"\"","    Here you can change your grid from a 3x3 to a 2x2 to test run times","    \"\"\"","    dictionary = get_dictionary(\"words.txt\")","    words = search(grid, dictionary)","    display_words(words)","","if __name__ == \"__main__\":","    # Code in here will only execution when the file is run directly    ","    main()"],"id":77},{"start":{"row":0,"column":0},"end":{"row":119,"column":10},"action":"insert","lines":["from string import ascii_uppercase","from random import choice","","","def make_grid(width, height):","    \"\"\"","    Creates a grid that will hold all of the tiles","    for a boggle game","    \"\"\"","    return {(row, col): choice(ascii_uppercase)","        for row in range(height)","        for col in range(width)}","","","def neighbours_of_position(coords):","    \"\"\"","    Get neighbours of a given position","    \"\"\"","    row = coords[0]","    col = coords[1]","","    # Assign each of the neighbours","    # Top-left to top-right","    top_left = (row - 1, col - 1)","    top_center = (row - 1, col)","    top_right = (row - 1, col + 1)","","    # Left to right","    left = (row, col - 1)","    # The `(row, col)` coordinates passed to this","    # function are situated here","    right = (row, col + 1)","","    # Bottom-left to bottom-right","    bottom_left = (row + 1, col -1)","    bottom_center = (row + 1, col)","    bottom_right = (row + 1, col + 1)","","    return [top_left, top_center, top_right,","            left, right,","            bottom_left, bottom_center, bottom_right]","","","def all_grid_neighbours(grid):","    \"\"\"","    Get all of the possible neighbours for each position in","    the grid","    \"\"\"","    neighbours = {}","    for position in grid:","        position_neighbours = neighbours_of_position(position)","        neighbours[position] = [p for p in position_neighbours if p in grid]","    return neighbours","","","def path_to_word(grid, path):","    \"\"\"","    Add all of the letters on the path to a string","    \"\"\"","    return ''.join([grid[p] for p in path])","","","def search(grid, dictionary):","    \"\"\"","    Search thrugh the paths to locate words by matching","    strings to words in a dictionary","    \"\"\"","    neighbours = all_grid_neighbours(grid)","    paths = []","    full_words, stems = dictionary","","    def do_search(path):","        word = path_to_word(grid, path)","        if word in full_words:","            paths.append(path)","        if word not in stems:","            return","        for next_pos in neighbours[path[-1]]:","            if next_pos not in path:","                do_search(path + [next_pos])","    ","    for position in grid:","        do_search([position])","    ","    words = []","    for path in paths:","        words.append(path_to_word(grid, path))","    return set(words)","","","def get_dictionary(dictionary_file):","    \"\"\"","    Load dictionary file","    \"\"\"","    full_words, stems = set(), set()","    with open(dictionary_file) as f:","        for word in f:","            word = word.strip().upper()","            full_words.add(word)","","            for i in range(1, len(word)):","                stems.add(word[:i])","","        return full_words, stems","","","def main():","    \"\"\"","    This is the function that will run the whole project","    \"\"\"","    grid = make_grid(4, 4)","    dictionary = get_dictionary('words.txt')","    words = search(grid, dictionary)","    for word in words:","        print(word)","    print(\"Found %s words\" % len(words))","","","if __name__ == \"__main__\":","    main()"]}]]},"ace":{"folds":[],"scrolltop":1318.5,"scrollleft":0,"selection":{"start":{"row":119,"column":10},"end":{"row":119,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":74,"state":"start","mode":"ace/mode/python"}},"timestamp":1574696638041,"hash":"c7908d0789536e2693a192e9f4bcfdb282af01f5"}